$NetBSD: patch-cg,v 1.1 2011/04/14 18:11:45 drochner Exp $

--- WebCore/html/HTMLCanvasElement.cpp.orig	2010-09-10 13:20:33.000000000 +0000
+++ WebCore/html/HTMLCanvasElement.cpp
@@ -67,7 +67,6 @@ const float HTMLCanvasElement::MaxCanvas
 HTMLCanvasElement::HTMLCanvasElement(const QualifiedName& tagName, Document* doc)
     : HTMLElement(tagName, doc)
     , m_size(defaultWidth, defaultHeight)
-    , m_observer(0)
     , m_originClean(true)
     , m_ignoreReset(false)
     , m_createdImageBuffer(false)
@@ -77,8 +76,9 @@ HTMLCanvasElement::HTMLCanvasElement(con
 
 HTMLCanvasElement::~HTMLCanvasElement()
 {
-    if (m_observer)
-        m_observer->canvasDestroyed(this);
+    HashSet<CanvasObserver*>::iterator end = m_observers.end();
+    for (HashSet<CanvasObserver*>::iterator it = m_observers.begin(); it != end; ++it)
+        (*it)->canvasDestroyed(this);
 }
 
 #if ENABLE(DASHBOARD_SUPPORT)
@@ -123,6 +123,16 @@ RenderObject* HTMLCanvasElement::createR
     return HTMLElement::createRenderer(arena, style);
 }
 
+void HTMLCanvasElement::addObserver(CanvasObserver* observer)
+{
+    m_observers.add(observer);
+}
+
+void HTMLCanvasElement::removeObserver(CanvasObserver* observer)
+{
+    m_observers.remove(observer);
+}
+
 void HTMLCanvasElement::setHeight(int value)
 {
     setAttribute(heightAttr, String::number(value));
@@ -206,9 +216,10 @@ void HTMLCanvasElement::willDraw(const F
         m_dirtyRect.unite(r);
         ro->repaintRectangle(enclosingIntRect(m_dirtyRect));
     }
-    
-    if (m_observer)
-        m_observer->canvasChanged(this, rect);
+
+    HashSet<CanvasObserver*>::iterator end = m_observers.end();
+    for (HashSet<CanvasObserver*>::iterator it = m_observers.begin(); it != end; ++it)
+        (*it)->canvasChanged(this, rect);
 }
 
 void HTMLCanvasElement::reset()
@@ -247,8 +258,9 @@ void HTMLCanvasElement::reset()
         }
     }
 
-    if (m_observer)
-        m_observer->canvasResized(this);
+    HashSet<CanvasObserver*>::iterator end = m_observers.end();
+    for (HashSet<CanvasObserver*>::iterator it = m_observers.begin(); it != end; ++it)
+        (*it)->canvasResized(this);
 }
 
 void HTMLCanvasElement::paint(GraphicsContext* context, const IntRect& r)
